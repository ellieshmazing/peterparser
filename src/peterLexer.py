# Generated from peterLexer.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,41,238,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,1,0,1,0,1,0,1,0,1,0,1,1,1,
        1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,
        4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,
        8,1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,11,4,11,136,8,11,11,11,12,
        11,137,1,12,5,12,141,8,12,10,12,12,12,144,9,12,1,12,1,12,4,12,148,
        8,12,11,12,12,12,149,1,13,3,13,153,8,13,1,14,1,14,1,15,1,15,1,15,
        1,15,1,16,1,16,1,16,4,16,164,8,16,11,16,12,16,165,1,17,1,17,5,17,
        170,8,17,10,17,12,17,173,9,17,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
        1,31,1,31,1,31,1,32,1,32,1,32,1,33,1,33,1,33,1,34,1,34,1,35,1,35,
        1,36,1,36,1,37,1,37,1,38,1,38,1,39,1,39,1,39,1,39,1,40,1,40,1,40,
        1,40,1,41,1,41,1,42,1,42,0,0,43,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,0,23,11,25,12,27,0,29,13,31,14,33,15,35,16,37,17,
        39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,57,27,59,28,
        61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,36,77,37,79,38,81,39,
        83,40,85,41,1,0,3,1,0,48,57,2,0,65,90,97,122,1,0,34,34,242,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,23,1,0,0,
        0,0,25,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,1,87,1,0,0,0,3,92,1,0,0,0,5,98,1,0,0,0,7,101,1,0,0,0,9,106,1,0,
        0,0,11,111,1,0,0,0,13,117,1,0,0,0,15,121,1,0,0,0,17,125,1,0,0,0,
        19,128,1,0,0,0,21,132,1,0,0,0,23,135,1,0,0,0,25,142,1,0,0,0,27,152,
        1,0,0,0,29,154,1,0,0,0,31,156,1,0,0,0,33,163,1,0,0,0,35,167,1,0,
        0,0,37,176,1,0,0,0,39,178,1,0,0,0,41,180,1,0,0,0,43,182,1,0,0,0,
        45,184,1,0,0,0,47,186,1,0,0,0,49,188,1,0,0,0,51,191,1,0,0,0,53,194,
        1,0,0,0,55,197,1,0,0,0,57,200,1,0,0,0,59,202,1,0,0,0,61,205,1,0,
        0,0,63,207,1,0,0,0,65,210,1,0,0,0,67,213,1,0,0,0,69,216,1,0,0,0,
        71,218,1,0,0,0,73,220,1,0,0,0,75,222,1,0,0,0,77,224,1,0,0,0,79,226,
        1,0,0,0,81,230,1,0,0,0,83,234,1,0,0,0,85,236,1,0,0,0,87,88,5,84,
        0,0,88,89,5,114,0,0,89,90,5,117,0,0,90,91,5,101,0,0,91,2,1,0,0,0,
        92,93,5,70,0,0,93,94,5,97,0,0,94,95,5,108,0,0,95,96,5,115,0,0,96,
        97,5,101,0,0,97,4,1,0,0,0,98,99,5,105,0,0,99,100,5,102,0,0,100,6,
        1,0,0,0,101,102,5,101,0,0,102,103,5,108,0,0,103,104,5,115,0,0,104,
        105,5,101,0,0,105,8,1,0,0,0,106,107,5,101,0,0,107,108,5,108,0,0,
        108,109,5,105,0,0,109,110,5,102,0,0,110,10,1,0,0,0,111,112,5,119,
        0,0,112,113,5,104,0,0,113,114,5,105,0,0,114,115,5,108,0,0,115,116,
        5,101,0,0,116,12,1,0,0,0,117,118,5,102,0,0,118,119,5,111,0,0,119,
        120,5,114,0,0,120,14,1,0,0,0,121,122,5,97,0,0,122,123,5,110,0,0,
        123,124,5,100,0,0,124,16,1,0,0,0,125,126,5,111,0,0,126,127,5,114,
        0,0,127,18,1,0,0,0,128,129,5,110,0,0,129,130,5,111,0,0,130,131,5,
        116,0,0,131,20,1,0,0,0,132,133,7,0,0,0,133,22,1,0,0,0,134,136,3,
        21,10,0,135,134,1,0,0,0,136,137,1,0,0,0,137,135,1,0,0,0,137,138,
        1,0,0,0,138,24,1,0,0,0,139,141,3,21,10,0,140,139,1,0,0,0,141,144,
        1,0,0,0,142,140,1,0,0,0,142,143,1,0,0,0,143,145,1,0,0,0,144,142,
        1,0,0,0,145,147,5,46,0,0,146,148,3,21,10,0,147,146,1,0,0,0,148,149,
        1,0,0,0,149,147,1,0,0,0,149,150,1,0,0,0,150,26,1,0,0,0,151,153,7,
        1,0,0,152,151,1,0,0,0,153,28,1,0,0,0,154,155,5,44,0,0,155,30,1,0,
        0,0,156,157,5,39,0,0,157,158,3,27,13,0,158,159,5,39,0,0,159,32,1,
        0,0,0,160,164,3,27,13,0,161,164,3,21,10,0,162,164,5,95,0,0,163,160,
        1,0,0,0,163,161,1,0,0,0,163,162,1,0,0,0,164,165,1,0,0,0,165,163,
        1,0,0,0,165,166,1,0,0,0,166,34,1,0,0,0,167,171,5,34,0,0,168,170,
        8,2,0,0,169,168,1,0,0,0,170,173,1,0,0,0,171,169,1,0,0,0,171,172,
        1,0,0,0,172,174,1,0,0,0,173,171,1,0,0,0,174,175,5,34,0,0,175,36,
        1,0,0,0,176,177,5,43,0,0,177,38,1,0,0,0,178,179,5,45,0,0,179,40,
        1,0,0,0,180,181,5,42,0,0,181,42,1,0,0,0,182,183,5,47,0,0,183,44,
        1,0,0,0,184,185,5,37,0,0,185,46,1,0,0,0,186,187,5,61,0,0,187,48,
        1,0,0,0,188,189,5,43,0,0,189,190,5,61,0,0,190,50,1,0,0,0,191,192,
        5,45,0,0,192,193,5,61,0,0,193,52,1,0,0,0,194,195,5,42,0,0,195,196,
        5,61,0,0,196,54,1,0,0,0,197,198,5,47,0,0,198,199,5,61,0,0,199,56,
        1,0,0,0,200,201,5,60,0,0,201,58,1,0,0,0,202,203,5,60,0,0,203,204,
        5,61,0,0,204,60,1,0,0,0,205,206,5,62,0,0,206,62,1,0,0,0,207,208,
        5,62,0,0,208,209,5,43,0,0,209,64,1,0,0,0,210,211,5,61,0,0,211,212,
        5,61,0,0,212,66,1,0,0,0,213,214,5,33,0,0,214,215,5,61,0,0,215,68,
        1,0,0,0,216,217,5,91,0,0,217,70,1,0,0,0,218,219,5,93,0,0,219,72,
        1,0,0,0,220,221,5,40,0,0,221,74,1,0,0,0,222,223,5,41,0,0,223,76,
        1,0,0,0,224,225,5,35,0,0,225,78,1,0,0,0,226,227,5,39,0,0,227,228,
        5,39,0,0,228,229,5,39,0,0,229,80,1,0,0,0,230,231,5,32,0,0,231,232,
        1,0,0,0,232,233,6,40,0,0,233,82,1,0,0,0,234,235,5,9,0,0,235,84,1,
        0,0,0,236,237,5,10,0,0,237,86,1,0,0,0,8,0,137,142,149,152,163,165,
        171,1,6,0,0
    ]

class peterLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    IF = 3
    ELSE = 4
    ELIF = 5
    WHILE = 6
    FOR = 7
    AND = 8
    OR = 9
    NOT = 10
    INTEGER = 11
    FLOAT = 12
    COMMA = 13
    CHAR = 14
    ID = 15
    STRING = 16
    ADD = 17
    SUB = 18
    MULT = 19
    DIV = 20
    MOD = 21
    ASN = 22
    ADDASN = 23
    SUBASN = 24
    MULTASN = 25
    DIVASN = 26
    LT = 27
    LTE = 28
    GT = 29
    GTE = 30
    EQUIV = 31
    NEQUIV = 32
    OPENBRACK = 33
    CLOSEBRACK = 34
    OPENPAREN = 35
    CLOSEPAREN = 36
    LINECMT = 37
    BLCKCMT = 38
    SPACE = 39
    WHITESPACE = 40
    NEWLINE = 41

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'True'", "'False'", "'if'", "'else'", "'elif'", "'while'", 
            "'for'", "'and'", "'or'", "'not'", "','", "'+'", "'-'", "'*'", 
            "'/'", "'%'", "'='", "'+='", "'-='", "'*='", "'/='", "'<'", 
            "'<='", "'>'", "'>+'", "'=='", "'!='", "'['", "']'", "'('", 
            "')'", "'#'", "'''''", "' '", "'\\t'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "IF", "ELSE", "ELIF", "WHILE", "FOR", "AND", 
            "OR", "NOT", "INTEGER", "FLOAT", "COMMA", "CHAR", "ID", "STRING", 
            "ADD", "SUB", "MULT", "DIV", "MOD", "ASN", "ADDASN", "SUBASN", 
            "MULTASN", "DIVASN", "LT", "LTE", "GT", "GTE", "EQUIV", "NEQUIV", 
            "OPENBRACK", "CLOSEBRACK", "OPENPAREN", "CLOSEPAREN", "LINECMT", 
            "BLCKCMT", "SPACE", "WHITESPACE", "NEWLINE" ]

    ruleNames = [ "TRUE", "FALSE", "IF", "ELSE", "ELIF", "WHILE", "FOR", 
                  "AND", "OR", "NOT", "DIGIT", "INTEGER", "FLOAT", "LETTER", 
                  "COMMA", "CHAR", "ID", "STRING", "ADD", "SUB", "MULT", 
                  "DIV", "MOD", "ASN", "ADDASN", "SUBASN", "MULTASN", "DIVASN", 
                  "LT", "LTE", "GT", "GTE", "EQUIV", "NEQUIV", "OPENBRACK", 
                  "CLOSEBRACK", "OPENPAREN", "CLOSEPAREN", "LINECMT", "BLCKCMT", 
                  "SPACE", "WHITESPACE", "NEWLINE" ]

    grammarFileName = "peterLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


